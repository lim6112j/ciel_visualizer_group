{"version":3,"sources":["Map.js","App.js","serviceWorker.js","index.js"],"names":["customTheme","sidePanelBg","CustomHeader","class","src","KeplerGl","injectComponents","PanelHeaderFactory","data","processRowObject","url","connect","state","dispatch","props","useDispatch","React","useEffect","addDataToMap","datasets","info","label","id","option","centerMap","readOnly","config","mapboxApiAccessToken","process","width","window","innerWidth","height","innerHeight","theme","reducers","combineReducers","keplerGl","keplerGlReducer","store","createStore","applyMiddleware","taskMiddleware","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4RA2DA,IAAMA,EAAc,CAClBC,YAAa,WAETC,EAAe,kBAAO,yBAAKC,MAAM,UAAX,IAAqB,yBAAKC,IAAI,2BAA9B,IAA0D,gDAMhFC,EAAWC,2BAAiB,CAChC,CAACC,qBAH2B,kBAAML,MAS9BM,EAAOC,2BAAiBC,GA+D9B,IAKeC,qBALS,SAAAC,GAAK,OAAIA,KAEN,SAACC,EAAUC,GAAX,MAAsB,CAC/CD,cAEaF,EA9Df,SAAaG,GAEX,IAAMD,EAAWE,wBA6CjB,OArBAC,IAAMC,WAAU,WACVT,GACFK,EACEK,uBAAa,CACXC,SAAU,CACRC,KAAM,CACJC,MAAO,aACPC,GAAI,cAENd,QAEFe,OAAQ,CACNC,WAAW,EACXC,UAAU,GAEZC,cAIL,CAACb,IAGF,kBAACR,EAAD,CACEiB,GAAG,aACHK,qBAAsBC,6FACtBC,MAAOC,OAAOC,WACdC,OAAQF,OAAOG,YACfC,MAAOlC,OC3HPmC,EAAWC,YAAgB,CAC/BC,SAAUC,MAENC,EAAQC,YAAYL,EAAU,GAAIM,YAAgBC,mBACzC,SAASC,IACtB,OACE,kBAAC,WAAD,CAAUJ,MAAOA,GACf,kBAAC,EAAD,OCNcK,QACW,cAA7Bd,OAAOe,SAASC,UAEe,UAA7BhB,OAAOe,SAASC,UAEhBhB,OAAOe,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAACN,EAAD,MACAO,SAASC,eAAe,SD2HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.6c4b084c.chunk.js","sourcesContent":["import React from 'react'\nimport { connect } from \"react-redux\";\nimport { addDataToMap } from \"kepler.gl/actions\";\nimport useSwr from \"swr\";\nimport { useDispatch } from \"react-redux\";\nimport KeplerGlSchema from 'kepler.gl/schemas';\nimport { injectComponents, PanelHeaderFactory } from 'kepler.gl/components';\nimport config from './config.json';\nimport { processCsvData, processRowObject } from 'kepler.gl/processors';\nimport { csv } from 'd3-request';\nimport url from './demand-planner.json'\nfunction csvToJson(csv_string) {\n\n  // 1. 문자열을 줄바꿈으로 구분 => 배열에 저장\n  //const rows = csv_string.split(\"\\r\\n\");\n\n  // 줄바꿈을 \\n으로만 구분해야하는 경우, 아래 코드 사용\n  const rows = csv_string.split(\"r\\n\");\n\n\n  // 2. 빈 배열 생성: CSV의 각 행을 담을 JSON 객체임\n  const jsonArray = { fields: [], rows: [] };\n\n\n  // 3. 제목 행 추출 후, 콤마로 구분 => 배열에 저장\n  const header = rows[0].split(\",\");\n  //0\n  //{name: 'country', format: '', type: 'string'}\n  //{name: 'state', format: '', type: 'string'}\n  //{name: 'day', format: 'YYYY-M-D H:m:s', type: 'timestamp'}\n  //{name: 'latitude', format: '', type: 'real'}\n  //{name: 'longitude', format: '', type: 'real'}\n  //{name: 'count', format: '', type: 'integer'}\n  header.forEach(function (d) {\n    d === 'day' ? jsonArray.fields.push({ name: d, format: '', type: 'timestamp' }) : jsonArray.fields.push({ name: d, format: '', type: 'integer' })\n  })\n\n  // 4. 내용 행 전체를 객체로 만들어, jsonArray에 담기\n  for (let i = 1; i < rows.length; i++) {\n\n    // 빈 객체 생성: 각 내용 행을 객체로 만들어 담아둘 객체임\n    let obj = {};\n\n    // 각 내용 행을 콤마로 구분\n    let row = rows[i].split(\",\");\n\n    // 각 내용행을 {제목1:내용1, 제목2:내용2, ...} 형태의 객체로 생성\n    for (let j = 0; j < header.length; j++) {\n      obj[header[j]] = row[j];\n    }\n\n    // 각 내용 행의 객체를 jsonArray배열에 담기\n    jsonArray.rows.push(obj);\n\n  }\n\n  // 5. 완성된 JSON 객체 배열 반환\n  return jsonArray;\n}\nconst customTheme = {\n  sidePanelBg: '#1f1d2c'\n}\nconst CustomHeader = () => (<div class=\"header\"> <img src=\"dist/planning/icon.png\" /> <b> Mobble Planner</b></div>);\n//const CustomHeader = (state) => (<div className=\"header\"> <img src=\"icon.png\" /><b> Mobble Planner</b></div>);\n\n// create a factory\nconst myCustomHeaderFactory = () => CustomHeader;\n// Inject custom header into Kepler.gl,\nconst KeplerGl = injectComponents([\n  [PanelHeaderFactory, myCustomHeaderFactory]\n]);\nconst getMapConfig = (keplerGlInstance) => {\n  return KeplerGlSchema.getConfigToSave(keplerGlInstance);\n}\n\nconst data = processRowObject(url)\n//const data = csv(url, function (err, data) {\n//console.log(data);\n//data = data.toString()\n//return csvToJson(data)\n//})\nfunction Map(props) {\n  //console.log(props.keplerGl)\n  const dispatch = useDispatch();\n  //const { data } = useSwr(\"covid\", async () => {\n  //const response = await fetch(\n  ////\"https://raw.githubusercontent.com/uber-web/kepler.gl-data/master/movement_pittsburgh/data.csv\"\n  //\"https://gist.githubusercontent.com/leighhalliday/a994915d8050e90d413515e97babd3b3/raw/a3eaaadcc784168e3845a98931780bd60afb362f/covid19.json\"\n  //);\n  ////const dataText = await response.text();\n  ////const data = csvToJSON(dataText)\n  //const data = await response.json()\n  //return data;\n  //});\n\n  //TODO getting config\n  //React.useEffect(() => {\n  ////console.log('callback called')\n  //if (props.keplerGl.TravelTime !== undefined) {\n  //console.log(getMapConfig(props.keplerGl.TravelTime))\n  //}\n  //}, [props.keplerGl.TravelTime])\n\n\n\n  //const keplerGl = this.props.keplerGl\n  //const mapToSave = KeplerGlSchema.save(keplerGl.TravelTime);\n  React.useEffect(() => {\n    if (data) {\n      dispatch(\n        addDataToMap({\n          datasets: {\n            info: {\n              label: \"TravelTime\",\n              id: \"TravelTime\"\n            },\n            data\n          },\n          option: {\n            centerMap: true,\n            readOnly: false\n          },\n          config\n        })\n      );\n    }\n  }, [dispatch]);\n\n  return (\n    <KeplerGl\n      id=\"TravelTime\"\n      mapboxApiAccessToken={process.env.REACT_APP_MAPBOX_API}\n      width={window.innerWidth}\n      height={window.innerHeight}\n      theme={customTheme}\n    />\n  );\n}\nconst mapStateToProps = state => state\n\nconst mapDispatchToProps = (dispatch, props) => ({\n  dispatch,\n});\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Map);\n","import React from \"react\";\nimport keplerGlReducer from \"kepler.gl/reducers\";\nimport { createStore, combineReducers, applyMiddleware } from \"redux\";\nimport { taskMiddleware } from \"react-palm/tasks\";\nimport { Provider } from \"react-redux\";\nimport Map from './Map'\n\n// define custom header\n\n// render KeplerGl, it will render your custom header\n\nconst reducers = combineReducers({\n  keplerGl: keplerGlReducer\n});\nconst store = createStore(reducers, {}, applyMiddleware(taskMiddleware));\nexport default function App() {\n  return (\n    <Provider store={store}>\n      <Map />\n    </Provider>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}